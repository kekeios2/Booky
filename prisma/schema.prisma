generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String  @id @default(cuid())
  email String? @unique
  image String?

  fullName String?
  password String?
  univId   Int?    @unique
  role     String  @default("User") 

  accounts      Account[]
  sessions      Session[]
  borrows       Borrow[]
  activateToken ActivateToken[]
  Notification Notification[]

  activated     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt


  SavedBook SavedBook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Borrow {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String // ðŸ‘ˆ Ø¨Ø¯Ù„Ø§Ù‹ Ù…Ù† Int
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     Int
  status     String   @default("PENDING") // "PENDING" | "APPROVED" | "REJECTED"
  borrowedAt DateTime @default(now())
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  category    String
  rating      Float
  description String
  image       String
  summary     String
  coverColor  String   @default("#763947")
  createdAt   DateTime @default(now())
  borrows     Borrow[]
  pdfUrl      String?

  SavedBook SavedBook[]
}


model SavedBook {
  id        Int      @id @default(autoincrement())
  userId    String
  bookId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}